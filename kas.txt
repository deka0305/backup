// ignore_for_file: camel_case_types

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Aplikasi Pencatatan',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Colors.blueGrey,
      ),
      home: DashboardPage(),
    );
  }
}

class DashboardPage extends StatefulWidget {
  @override
  _DashboardPageState createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage>
    with WidgetsBindingObserver {
  List<Map<String, dynamic>> _dataList = [];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _loadData();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _saveData(); // Ensure data is saved
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.paused ||
        state == AppLifecycleState.detached) {
      _saveData(); // Save data when the app is paused or about to terminate
    }
  }

  Future<void> _saveData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> dataStrings =
        _dataList.map((data) => jsonEncode(data)).toList();
    await prefs.setStringList('dataList', dataStrings);
    print('Data saved: $dataStrings');
  }

  Future<void> _loadData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String>? dataStrings = prefs.getStringList('dataList');
    if (dataStrings != null) {
      setState(() {
        _dataList = dataStrings
            .map((dataString) => jsonDecode(dataString))
            .toList()
            .cast<Map<String, dynamic>>();
      });
    }
  }

  void _addData(Map<String, dynamic> data) {
    setState(() {
      _dataList.add(data);
    });
    _saveData(); // Save data immediately after addition
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Center(
          child: Text(
            'Catatan Keuangan',
            textAlign: TextAlign.center,
          ),
        ),
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(
          bottom: Radius.circular(20),
        )),
      ),
      body: GridView.count(
        crossAxisCount: 2,
        children: <Widget>[
          MenuCard(
            icon: Icons.add,
            title: 'Input Data',
            onTap: () async {
              final data = await Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => InputDataPage(dataList: _dataList),
                ),
              );
              if (data != null) {
                _addData(data);
              }
            },
          ),
          MenuCard(
            icon: Icons.receipt,
            title: 'Rekap Data',
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => RekapDataPage(dataList: _dataList),
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}

class MenuCard extends StatelessWidget {
  final IconData icon;
  final String title;
  final VoidCallback onTap;

  const MenuCard({
    required this.icon,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      child: InkWell(
        onTap: onTap,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Icon(icon, size: 40),
            SizedBox(height: 5),
            Text(title, style: TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
  }
}

class InputDataPage extends StatefulWidget {
  final List<Map<String, dynamic>> dataList;

  InputDataPage({required this.dataList});

  @override
  _InputDataPageState createState() => _InputDataPageState();
}

class _InputDataPageState extends State<InputDataPage> {
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();

  // Menyaring data yang hanya sesuai dengan tanggal hari ini
  List<Map<String, dynamic>> _getTodayData() {
    List<Map<String, dynamic>> todayData = [];
    DateTime today = DateTime.now();
    for (var data in widget.dataList) {
      DateTime date = DateTime.parse(data['date']);
      // Menambahkan data hanya jika tanggalnya sesuai dengan hari ini
      if (date.year == today.year &&
          date.month == today.month &&
          date.day == today.day) {
        todayData.add(data);
      }
    }
    return todayData;
  }

  Future<void> _saveData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> dataStrings =
        widget.dataList.map((data) => jsonEncode(data)).toList();
    await prefs.setStringList('dataList', dataStrings);
    print('Data saved: $dataStrings');
  }

  void _addData() {
    if (_descriptionController.text.isNotEmpty &&
        _amountController.text.isNotEmpty) {
      final data = {
        'description': _descriptionController.text,
        'amount': int.parse(_amountController.text),
        'date': DateTime.now().toIso8601String(), // Save as ISO string
      };
      setState(() {
        widget.dataList.add(data);
      });
      _saveData(); // Save immediately
      _descriptionController.clear();
      _amountController.clear();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Input Data'),
      ),
      body: Column(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(5.0),
            child: Container(
              decoration: BoxDecoration(
                color: const Color(0xFFF0F8FF), // Warna latar belakang
                borderRadius: BorderRadius.circular(10.0), // Menambahkan radius
              ),
              child: TextField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Deskripsi',
                  labelStyle: TextStyle(color: Colors.black),
                  contentPadding: EdgeInsets.symmetric(horizontal: 10.0),
                  border: InputBorder.none, // Menghilangkan garis bawah
                  enabledBorder: InputBorder.none, // Saat tidak fokus
                  focusedBorder: InputBorder.none, // Saat fokus
                ),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(5.0),
            child: Container(
              decoration: BoxDecoration(
                color: const Color(0xFFF0F8FF), // Warna latar belakang
                borderRadius: BorderRadius.circular(10.0), // Menambahkan radius
              ),
              child: TextField(
                controller: _amountController,
                decoration: const InputDecoration(
                  labelText: 'Nominal',
                  labelStyle: TextStyle(color: Colors.black),
                  contentPadding: EdgeInsets.symmetric(horizontal: 10.0),
                  border: InputBorder.none, // Menghilangkan garis bawah
                  enabledBorder: InputBorder.none, // Saat tidak fokus
                  focusedBorder: InputBorder.none, // Saat fokus
                ),
                keyboardType: TextInputType.number,
              ),
            ),
          ),
          ElevatedButton(
            onPressed: _addData,
            child: Text('Tambah Data'),
          ),
          Expanded(
            child: ListView.builder(
              itemCount:
                  _getTodayData().length, // Hanya menampilkan data hari ini
              itemBuilder: (context, index) {
                final data = _getTodayData()[index];
                return Card(
                  child: ListTile(
                    title: Text(data['description']),
                    subtitle: Text(
                        'Nominal: ${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ').format(data['amount'])}'),
                    trailing: IconButton(
                      icon: Icon(Icons.delete),
                      onPressed: () {
                        setState(() {
                          widget.dataList.removeAt(index);
                        });
                        _saveData();
                      },
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class RekapDataPage extends StatefulWidget {
  final List<Map<String, dynamic>> dataList;

  RekapDataPage({required this.dataList});

  @override
  _RekapDataPageState createState() => _RekapDataPageState();
}

class _RekapDataPageState extends State<RekapDataPage> {
  String _selectedOption = 'Harian';

  Map<String, List<Map<String, dynamic>>> _groupDataByDate() {
    Map<String, List<Map<String, dynamic>>> groupedData = {};

    for (var data in widget.dataList) {
      DateTime date = DateTime.parse(data['date']);
      String dateKey = DateFormat('dd-MM-yyyy').format(date);

      if (!groupedData.containsKey(dateKey)) {
        groupedData[dateKey] = [];
      }
      groupedData[dateKey]!.add(data);
    }

    return groupedData;
  }

  Map<String, List<Map<String, dynamic>>> _groupDataByMonth() {
    Map<String, List<Map<String, dynamic>>> groupedData = {};

    for (var data in widget.dataList) {
      DateTime date = DateTime.parse(data['date']);
      String monthKey = DateFormat('MM-yyyy').format(date);

      if (!groupedData.containsKey(monthKey)) {
        groupedData[monthKey] = [];
      }
      groupedData[monthKey]!.add(data);
    }

    return groupedData;
  }

  void _deleteData(int index) {
    setState(() {
      widget.dataList.removeAt(index);
    });
    _saveData();
  }

  Future<void> _saveData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> dataStrings =
        widget.dataList.map((data) => jsonEncode(data)).toList();
    await prefs.setStringList('dataList', dataStrings);
    print('Data saved: $dataStrings');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rekap Data'),
      ),
      body: Column(
        children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _selectedOption = 'Harian';
                  });
                },
                child: Text('Rekap Harian'),
              ),
              SizedBox(width: 10),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _selectedOption = 'Bulanan';
                  });
                },
                child: Text('Rekap Bulanan'),
              ),
            ],
          ),
          Expanded(
            child: _selectedOption == 'Harian'
                ? ListView.builder(
                    itemCount: _groupDataByDate().length,
                    itemBuilder: (context, index) {
                      String dateKey = _groupDataByDate().keys.elementAt(index);
                      List<Map<String, dynamic>> dailyData =
                          _groupDataByDate()[dateKey]!;
                      int totalAmount = dailyData.fold(
                          0, (sum, item) => sum + (item['amount'] as int));

                      return Card(
                        margin: const EdgeInsets.symmetric(
                            vertical: 8.0, horizontal: 10.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        child: InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => DetailRekapPage(
                                  date: dateKey,
                                  data: dailyData,
                                  onDelete: (index) => _deleteData(index),
                                ),
                              ),
                            );
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(10.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Tanggal: $dateKey',
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0,
                                  ),
                                ),
                                const SizedBox(height: 8.0),
                                ...dailyData.map((data) {
                                  return Padding(
                                    padding:
                                        const EdgeInsets.symmetric(vertical: 2.0),
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Expanded(
                                          child: Text(
                                            '${data['description']}',
                                            style: const TextStyle(fontSize: 14.0),
                                          ),
                                        ),
                                        Text(
                                          '${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0).format(data['amount'])}',
                                          style: const TextStyle(
                                            fontSize: 14.0,
                                            fontWeight: FontWeight.w500,
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                }).toList(),
                                const Divider(),
                                Align(
                                  alignment: Alignment.centerRight,
                                  child: Text(
                                    'Total: ${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0).format(totalAmount)}',
                                    style: const TextStyle(
                                      fontSize: 16.0,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.green,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                  )
                : ListView.builder(
                    itemCount: _groupDataByMonth().length,
                    itemBuilder: (context, index) {
                      String monthKey =
                          _groupDataByMonth().keys.elementAt(index);
                      List<Map<String, dynamic>> monthlyData =
                          _groupDataByMonth()[monthKey]!;
                      int totalAmount = monthlyData.fold(
                          0, (sum, item) => sum + (item['amount'] as int));

                      return Card(
                        margin: const EdgeInsets.symmetric(
                            vertical: 8.0, horizontal: 10.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10.0),
                        ),
                        child: InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => DetailRekapPage(
                                  date: monthKey,
                                  data: monthlyData,
                                  onDelete: (index) => _deleteData(index),
                                ),
                              ),
                            );
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(10.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Bulan: $monthKey',
                                  style: const TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0,
                                  ),
                                ),
                                const SizedBox(height: 8.0),
                                ...monthlyData.map((data) {
                                  return Padding(
                                    padding:
                                        const EdgeInsets.symmetric(vertical: 2.0),
                                    child: Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Expanded(
                                          child: Text(
                                            '${data['description']}',
                                            style: const TextStyle(fontSize: 14.0),
                                          ),
                                        ),
                                        Text(
                                          '${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0).format(data['amount'])}',
                                          style: const TextStyle(
                                            fontSize: 14.0,
                                            fontWeight: FontWeight.w500,
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                }).toList(),
                                const Divider(),
                                Align(
                                  alignment: Alignment.centerRight,
                                  child: Text(
                                    'Total: ${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0).format(totalAmount)}',
                                    style: const TextStyle(
                                      fontSize: 16.0,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.green,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }
}
class DetailRekapPage extends StatelessWidget {
  final String date;
  final List<Map<String, dynamic>> data;
  final Function(int) onDelete;

  DetailRekapPage({
    required this.date,
    required this.data,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Detail Rekap: $date')),
      body: ListView.builder(
        itemCount: data.length,
        itemBuilder: (context, index) {
          final dataItem = data[index];
          return Card(
            margin: EdgeInsets.symmetric(vertical: 8.0, horizontal: 10.0),
            child: ListTile(
              title: Text(dataItem['description']),
              subtitle: Text('Nominal: ${NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ').format(dataItem['amount'])}'),
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: Icon(Icons.edit),
                    onPressed: () {
                      // Implement edit functionality here
                      // Navigate to edit page
                    },
                  ),
                  IconButton(
                    icon: Icon(Icons.delete),
                    onPressed: () {
                      onDelete(index);
                      Navigator.pop(context); // Go back after deletion
                    },
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
